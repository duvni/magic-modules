package networksecurity_test
{{- if ne $.TargetVersionName "ga" }}

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccNetworkSecuritySecurityProfile_networkSecuritySecurityProfileMirroringExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckNetworkSecuritySecurityProfileDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkSecuritySecurityProfile_networkSecuritySecurityProfileMirroringBroker_basic(context),
			},
			{
				ResourceName:            "google_network_security_security_profile.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "parent", "terraform_labels"},
			},
			{
				Config: testAccNetworkSecuritySecurityProfile_networkSecuritySecurityProfileMirroringBroker_update(context),
			},
			{
				ResourceName:            "google_network_security_security_profile.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "parent", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkSecuritySecurityProfile_networkSecuritySecurityProfileMirroringBroker_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network" "default" {
  provider                = google-beta
  name                    = "tf-test-my-network%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_network_security_mirroring_deployment_group" "default" {
  provider                      = google-beta
  mirroring_deployment_group_id = "tf-test-my-dg%{random_suffix}"
  location                      = "global"
  network                       = google_compute_network.default.id
}

resource "google_network_security_mirroring_endpoint_group" "default" {
  provider                    = google-beta
  mirroring_endpoint_group_id = "tf-test-my-eg%{random_suffix}"
  location                    = "global"
  type                        = "BROKER"
  mirroring_deployment_groups = [google_network_security_mirroring_deployment_group.default.id]
}

resource "google_network_security_security_profile" "default" {
  provider    = google-beta
  name        = "tf-test-my-security-profile%{random_suffix}"
  parent      = "organizations/%{org_id}"
  description = "my description"
  type        = "CUSTOM_MIRRORING"

  custom_mirroring_profile {
    mirroring_endpoint_group = google_network_security_mirroring_endpoint_group.default.id
    mirroring_deployment_groups = [google_network_security_mirroring_deployment_group.default.id]
  }
}
`, context)
}

func testAccNetworkSecuritySecurityProfile_networkSecuritySecurityProfileMirroringBroker_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_network" "default" {
  provider                = google-beta
  name                    = "tf-test-my-network%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_network_security_mirroring_deployment_group" "default" {
  provider                      = google-beta
  mirroring_deployment_group_id = "tf-test-my-dg%{random_suffix}"
  location                      = "global"
  network                       = google_compute_network.default.id
}

resource "google_network_security_mirroring_endpoint_group" "default" {
  provider                    = google-beta
  mirroring_endpoint_group_id = "tf-test-my-eg%{random_suffix}"
  location                    = "global"
  type                        = "BROKER"
  mirroring_deployment_groups = [google_network_security_mirroring_deployment_group.default.id]
}

resource "google_network_security_security_profile" "default" {
  provider    = google-beta
  name        = "tf-test-my-security-profile%{random_suffix}"
  parent      = "organizations/%{org_id}"
  description = "my description"
  type        = "CUSTOM_MIRRORING"

  custom_mirroring_profile {
    mirroring_endpoint_group = google_network_security_mirroring_endpoint_group.default.id
    mirroring_deployment_groups = []
  }
}
`, context)
}

{{ end }}
